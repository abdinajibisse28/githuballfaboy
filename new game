<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory Card Game</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: white;
        }

        header {
            text-align: center;
            margin-bottom: 20px;
            width: 100%;
            max-width: 800px;
        }

        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 600px;
            background: rgba(255, 255, 255, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            backdrop-filter: blur(5px);
        }

        .info-box {
            text-align: center;
            background: rgba(0, 0, 0, 0.2);
            padding: 10px 15px;
            border-radius: 8px;
            min-width: 100px;
        }

        .info-box span {
            font-size: 1.8rem;
            font-weight: bold;
        }

        .game-container {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 12px;
            max-width: 600px;
            width: 100%;
            margin-bottom: 30px;
        }

        .card {
            aspect-ratio: 3/4;
            background: #fff;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2.5rem;
            cursor: pointer;
            transition: transform 0.3s, background 0.3s;
            transform-style: preserve-3d;
            position: relative;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .card-front, .card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .card-front {
            background: linear-gradient(135deg, #ff9a9e 0%, #fad0c4 100%);
            transform: rotateY(180deg);
        }

        .card-back {
            background: linear-gradient(135deg, #3a7bd5 0%, #00d2ff 100%);
            color: transparent;
        }

        .card.flipped {
            transform: rotateY(180deg);
        }

        .card.matched .card-front {
            background: linear-gradient(135deg, #56ab2f 0%, #a8e063 100%);
        }

        .controls {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
        }

        button {
            padding: 12px 25px;
            border: none;
            border-radius: 50px;
            background: #fff;
            color: #3a7bd5;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
        }

        button:active {
            transform: translateY(0);
        }

        .difficulty {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .difficulty-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .difficulty-btn.active {
            background: white;
            color: #3a7bd5;
        }

        @media (max-width: 600px) {
            h1 {
                font-size: 2rem;
            }
            
            .game-container {
                grid-template-columns: repeat(3, 1fr);
                gap: 10px;
            }
            
            .card {
                font-size: 2rem;
            }
            
            .game-info {
                flex-direction: column;
                gap: 10px;
            }
            
            .info-box {
                width: 100%;
            }
        }

        @media (max-width: 400px) {
            .game-container {
                grid-template-columns: repeat(2, 1fr);
            }
            
            h1 {
                font-size: 1.8rem;
            }
            
            button {
                padding: 10px 20px;
            }
        }

        .win-message {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            z-index: 100;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.5s;
        }

        .win-message.show {
            opacity: 1;
            pointer-events: all;
        }

        .win-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            max-width: 90%;
            width: 400px;
            color: #333;
        }

        .win-content h2 {
            font-size: 2.5rem;
            margin-bottom: 15px;
            color: #6a11cb;
        }

        .win-content p {
            font-size: 1.2rem;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Memory Match Challenge</h1>
        <p>Flip the cards to find matching pairs. Be quick and remember where you saw them!</p>
    </header>

    <div class="game-info">
        <div class="info-box">
            <p>Moves</p>
            <span id="moves">0</span>
        </div>
        <div class="info-box">
            <p>Time</p>
            <span id="time">0s</span>
        </div>
        <div class="info-box">
            <p>Matches</p>
            <span id="matches">0/8</span>
        </div>
    </div>

    <div class="game-container" id="game-container">
        <!-- Cards will be generated by JavaScript -->
    </div>

    <div class="controls">
        <button id="reset-btn"><i class="fas fa-redo"></i> Reset Game</button>
        <button id="hint-btn"><i class="fas fa-lightbulb"></i> Hint (3)</button>
    </div>

    <div class="difficulty">
        <button class="difficulty-btn active" data-difficulty="easy">Easy</button>
        <button class="difficulty-btn" data-difficulty="medium">Medium</button>
        <button class="difficulty-btn" data-difficulty="hard">Hard</button>
    </div>

    <div class="win-message" id="win-message">
        <div class="win-content">
            <h2>Congratulations!</h2>
            <p>You found all matches in <span id="final-moves">0</span> moves and <span id="final-time">0</span> seconds!</p>
            <button id="play-again-btn"><i class="fas fa-play"></i> Play Again</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Game variables
            let moves = 0;
            let matchedPairs = 0;
            let totalPairs = 8;
            let timer = 0;
            let timerInterval;
            let flippedCards = [];
            let gameStarted = false;
            let hints = 3;
            let difficulty = 'easy';

            // DOM elements
            const gameContainer = document.getElementById('game-container');
            const movesElement = document.getElementById('moves');
            const timeElement = document.getElementById('time');
            const matchesElement = document.getElementById('matches');
            const resetBtn = document.getElementById('reset-btn');
            const hintBtn = document.getElementById('hint-btn');
            const difficultyBtns = document.querySelectorAll('.difficulty-btn');
            const winMessage = document.getElementById('win-message');
            const finalMoves = document.getElementById('final-moves');
            const finalTime = document.getElementById('final-time');
            const playAgainBtn = document.getElementById('play-again-btn');

            // Icons for cards
            const cardIcons = [
                'fa-heart', 'fa-star', 'fa-bolt', 'fa-cloud', 
                'fa-flask', 'fa-key', 'fa-leaf', 'fa-gem'
            ];

            // Initialize game
            function initGame() {
                clearInterval(timerInterval);
                moves = 0;
                matchedPairs = 0;
                timer = 0;
                flippedCards = [];
                gameStarted = false;
                hints = 3;
                
                movesElement.textContent = moves;
                matchesElement.textContent = `${matchedPairs}/${totalPairs}`;
                timeElement.textContent = `${timer}s`;
                
                gameContainer.innerHTML = '';
                
                // Create card pairs based on difficulty
                let cards = [];
                for (let i = 0; i < totalPairs; i++) {
                    cards.push(cardIcons[i]);
                    cards.push(cardIcons[i]);
                }
                
                // Shuffle cards
                cards.sort(() => Math.random() - 0.5);
                
                // Create card elements
                cards.forEach(icon => {
                    const card = document.createElement('div');
                    card.className = 'card';
                    card.innerHTML = `
                        <div class="card-back"></div>
                        <div class="card-front"><i class="fas ${icon}"></i></div>
                    `;
                    card.addEventListener('click', () => flipCard(card, icon));
                    gameContainer.appendChild(card);
                });
                
                // Update hint button text
                hintBtn.innerHTML = `<i class="fas fa-lightbulb"></i> Hint (${hints})`;
            }

            // Flip card function
            function flipCard(card, icon) {
                // Start timer on first card flip
                if (!gameStarted) {
                    startTimer();
                    gameStarted = true;
                }
                
                // If card is already flipped or matched, do nothing
                if (card.classList.contains('flipped') || card.classList.contains('matched')) {
                    return;
                }
                
                // If already two cards are flipped, do nothing
                if (flippedCards.length === 2) {
                    return;
                }
                
                // Flip the card
                card.classList.add('flipped');
                flippedCards.push({card, icon});
                
                // Check for match if two cards are flipped
                if (flippedCards.length === 2) {
                    moves++;
                    movesElement.textContent = moves;
                    
                    setTimeout(checkMatch, 700);
                }
            }

            // Check for match
            function checkMatch() {
                const [card1, card2] = flippedCards;
                
                if (card1.icon === card2.icon) {
                    // Match found
                    card1.card.classList.add('matched');
                    card2.card.classList.add('matched');
                    matchedPairs++;
                    matchesElement.textContent = `${matchedPairs}/${totalPairs}`;
                    
                    // Check for win
                    if (matchedPairs === totalPairs) {
                        endGame();
                    }
                } else {
                    // No match, flip back
                    card1.card.classList.remove('flipped');
                    card2.card.classList.remove('flipped');
                }
                
                // Clear flipped cards array
                flippedCards = [];
            }

            // Start timer
            function startTimer() {
                clearInterval(timerInterval);
                timerInterval = setInterval(() => {
                    timer++;
                    timeElement.textContent = `${timer}s`;
                }, 1000);
            }

            // End game
            function endGame() {
                clearInterval(timerInterval);
                finalMoves.textContent = moves;
                finalTime.textContent = timer;
                setTimeout(() => {
                    winMessage.classList.add('show');
                }, 1000);
            }

            // Hint functionality
            function useHint() {
                if (hints <= 0) return;
                
                hints--;
                hintBtn.innerHTML = `<i class="fas fa-lightbulb"></i> Hint (${hints})`;
                
                // Get all unflipped, unmatched cards
                const unflippedCards = Array.from(document.querySelectorAll('.card:not(.flipped):not(.matched)'));
                
                if (unflippedCards.length < 2) return;
                
                // Find a matching pair
                const iconsMap = {};
                let pairFound = false;
                
                for (const card of unflippedCards) {
                    const icon = card.querySelector('.fa').classList[1];
                    if (iconsMap[icon]) {
                        // Found a pair
                        const card1 = iconsMap[icon];
                        const card2 = card;
                        
                        // Briefly show the pair
                        card1.classList.add('flipped');
                        card2.classList.add('flipped');
                        
                        setTimeout(() => {
                            card1.classList.remove('flipped');
                            card2.classList.remove('flipped');
                        }, 1000);
                        
                        pairFound = true;
                        break;
                    } else {
                        iconsMap[icon] = card;
                    }
                }
                
                if (!pairFound && unflippedCards.length >= 2) {
                    // Just show two random cards if no pair found
                    const randomIndex1 = Math.floor(Math.random() * unflippedCards.length);
                    let randomIndex2;
                    do {
                        randomIndex2 = Math.floor(Math.random() * unflippedCards.length);
                    } while (randomIndex1 === randomIndex2);
                    
                    const card1 = unflippedCards[randomIndex1];
                    const card2 = unflippedCards[randomIndex2];
                    
                    card1.classList.add('flipped');
                    card2.classList.add('flipped');
                    
                    setTimeout(() => {
                        card1.classList.remove('flipped');
                        card2.classList.remove('flipped');
                    }, 1000);
                }
            }

            // Set difficulty
            function setDifficulty(level) {
                difficulty = level;
                
                if (difficulty === 'easy') {
                    totalPairs = 6;
                } else if (difficulty === 'medium') {
                    totalPairs = 8;
                } else {
                    totalPairs = 12;
                }
                
                // Update active button
                difficultyBtns.forEach(btn => {
                    if (btn.dataset.difficulty === difficulty) {
                        btn.classList.add('active');
                    } else {
                        btn.classList.remove('active');
                    }
                });
                
                // Reset game with new difficulty
                initGame();
            }

            // Event listeners
            resetBtn.addEventListener('click', initGame);
            hintBtn.addEventListener('click', useHint);
            playAgainBtn.addEventListener('click', () => {
                winMessage.classList.remove('show');
                initGame();
            });
            
            difficultyBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    setDifficulty(btn.dataset.difficulty);
                });
            });

            // Initialize the game
            initGame();
        });
    </script>
</body>
</html>
